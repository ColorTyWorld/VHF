//
// The Visual HEIFLOW License
//
// Copyright (c) 2015-2018 Yong Tian, SUSTech, Shenzhen, China. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
// Note: only part of the files distributed in the software belong to the Visual HEIFLOW. 
// The software also contains contributed files, which may have their own copyright notices.
//  If not, the GNU General Public License holds for them, too, but so that the author(s) 
// of the file have the Copyright.

using DotSpatial.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Heiflow.Core.Data;
using System.IO;
using Heiflow.Models.Generic;
using System.ComponentModel;
using Heiflow.Controls.WinForm.Editors;
using System.Windows.Forms.Design;
using GeoAPI.Geometries;
using Heiflow.Applications;
using Heiflow.Controls.WinForm.Toolbox;
using Heiflow.Models.Tools;
using Heiflow.Presentation.Services;

namespace Heiflow.Tools.Conversion
{
    public class SaveAsClimateInput : ModelTool
    {
        public SaveAsClimateInput()
        {
            Name = "Save As Climate Input";
            Category = "Driving Forces";
            Description = "Save data cube as climate input data file";
            Version = "1.0.0.0";
            this.Author = "Yong Tian";
            VariableName = "variable";
            CellCount = 1;
            Format = "0.00";
        }

        [Category("Input")]
        [Description("The name of the input matrix")]
        public string Source { get; set; }

        [Category("Input")]
        [Description("The name of the variable")]
        public string VariableName { get; set; }

        [Category("Input")]
        [Description("The number of cell count")]
        public int CellCount { get; set; }

        [Category("Optional")]
        [Description("The numeric format, e.g. 0.000")]
        public string Format { get; set; }

        [Category("Output")]
        [Description("The file folder directory for the input raster")]
        [EditorAttribute(typeof(SaveFileNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
        public string DataFileName
        {
            get;
            set;
        }


        public override void Initialize()
        {
            this.Initialized = Validate(Source);
        }

        public override bool Execute(DotSpatial.Data.ICancelProgressHandler cancelProgressHandler)
        {
            var var_index = 0;
            var mat = Get3DMat(Source, ref var_index);
            int progress = 0;
            int count = 1;
            if (mat.DateTimes != null)
            {
                int nstep = mat.Size[1];
                int ncell = mat.Size[2];
                StreamWriter sw = new StreamWriter(DataFileName);
                string line = "Metrological File, generated by the software written by Visual Heiflow at " + DateTime.Now.ToString();
                sw.WriteLine(line);

                if (CellCount != ncell && ncell == 1)
                {
                    line = VariableName + " " + CellCount;
                    sw.WriteLine(line);
                    sw.WriteLine("######################");
                    for (int t = 0; t < nstep; t++)
                    {
                        var date = mat.DateTimes[t];
                        var scalar = mat.Value[var_index][t][0];
                        line = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t", date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second);

                        for (int i = 0; i < CellCount; i++)
                        {
                            line += scalar.ToString(Format) + "\t";
                        }
                        line += scalar.ToString(Format);
                        sw.WriteLine(line);
                        progress = t * 100 / nstep;
                        if (progress > count)
                        {
                            cancelProgressHandler.Progress("Package_Tool", progress, "Processing step:" + t);
                            count++;
                        }
                    }
                }
                else
                {
                    line = VariableName + " " + ncell;
                    sw.WriteLine(line);
                    sw.WriteLine("######################");
                    for (int t = 0; t < nstep; t++)
                    {
                        var date = mat.DateTimes[t];
                        var vec = mat.Value[var_index][t];
                        line = string.Format("{0}\t{1}\t{2}\t{3}\t{4}\t{5}\t", date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second);

                        for (int i = 0; i < vec.Length - 1; i++)
                        {
                            line += vec[i].ToString(Format) + "\t";
                        }
                        line += vec[vec.Length - 1];
                        sw.WriteLine(line);
                        progress = t * 100 / nstep;
                        if (progress > count)
                        {
                            cancelProgressHandler.Progress("Package_Tool", progress, "Processing step:" + t);
                            count++;
                        }
                    }
                }
          
                sw.Close();
                return true;
            }
            else
            {
                cancelProgressHandler.Progress("Package_Tool", 100, "the input data cube does not contain date information");
                return false;
            }

        }
    }
}